import requests
from bs4 import BeautifulSoup
import argparse
import logging
from colorama import init, Fore, Style
from concurrent.futures import ThreadPoolExecutor
import socket
import dns.resolver
import time


init()


logging.basicConfig(filename='vulnerability_scanner.log', level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')


results = []

def check_xss(url):
    start_time = time.time()
    test_script = "<script>alert('XSS')</script>"
    test_url = f"{url}?q={test_script}"
    response = requests.get(test_url)
    if test_script in response.text:
        result = f"[!] XSS Vulnerability found at: {test_url}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No XSS Vulnerability found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"XSS check completed in {time.time() - start_time} seconds")

def check_sql_injection(url):
    start_time = time.time()
    test_payload = "' OR '1'='1"
    test_url = f"{url}?id={test_payload}"
    response = requests.get(test_url)
    if "syntax" in response.text or "mysql" in response.text or "error" in response.text:
        result = f"[!] SQL Injection Vulnerability found at: {test_url}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No SQL Injection Vulnerability found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"SQL Injection check completed in {time.time() - start_time} seconds")

def check_lfi(url):
    start_time = time.time()
    test_payload = "../../../../etc/passwd"
    test_url = f"{url}?file={test_payload}"
    response = requests.get(test_url)
    if "root:x" in response.text:
        result = f"[!] LFI Vulnerability found at: {test_url}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No LFI Vulnerability found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"LFI check completed in {time.time() - start_time} seconds")

def check_csrf(url):
    start_time = time.time()
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    forms = soup.find_all('form')
    for form in forms:
        if not form.find('input', {'type': 'hidden', 'name':'csrf_token'}) and \
           not form.find('input', {'type': 'hidden', 'name':'authenticity_token'}) and \
           not form.find('input', {'type': 'hidden', 'name':'token'}):
            result = f"[!] CSRF Vulnerability found at: {url}"
            results.append(result)
            print(Fore.RED + result + Style.RESET_ALL)
            logging.warning(result)
            return
    result = "[+] No CSRF Vulnerability found."
    results.append(result)
    print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"CSRF check completed in {time.time() - start_time} seconds")

def check_directory_traversal(url):
    start_time = time.time()
    test_payload = "../../../../../../../../etc/passwd"
    test_url = f"{url}/{test_payload}"
    response = requests.get(test_url)
    if "root:x" in response.text:
        result = f"[!] Directory Traversal Vulnerability found at: {test_url}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No Directory Traversal Vulnerability found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"Directory Traversal check completed in {time.time() - start_time} seconds")

def check_ssrf(url):
    start_time = time.time()
    test_url = f"{url}?url=http://localhost:8080"
    response = requests.get(test_url)
    if "localhost" in response.text:
        result = f"[!] SSRF Vulnerability found at: {test_url}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No SSRF Vulnerability found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"SSRF check completed in {time.time() - start_time} seconds")

def check_xxe(url):
    start_time = time.time()
    headers = {'Content-Type': 'application/xml'}
    test_payload = """<?xml version="1.0" ?>
    <!DOCTYPE root [<!ENTITY test SYSTEM "file:///etc/passwd">]>
    <root>&test;</root>"""
    response = requests.post(url, data=test_payload, headers=headers)
    if "root:x" in response.text:
        result = f"[!] XXE Vulnerability found at: {url}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No XXE Vulnerability found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"XXE check completed in {time.time() - start_time} seconds")

def check_open_redirect(url):
    start_time = time.time()
    test_payload = "/redirect?url=http://evil.com"
    test_url = f"{url}{test_payload}"
    response = requests.get(test_url)
    if "evil.com" in response.url:
        result = f"[!] Open Redirect Vulnerability found at: {test_url}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No Open Redirect Vulnerability found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"Open Redirect check completed in {time.time() - start_time} seconds")

def scan_ports(host):
    start_time = time.time()
    open_ports = []
    for port in range(1, 1025):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((host, port))
        if result == 0:
            open_ports.append(port)
        sock.close()
    if open_ports:
        result = f"[!] Open Ports: {open_ports}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No Open Ports found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"Port scan completed in {time.time() - start_time} seconds")

def enumerate_subdomains(domain):
    start_time = time.time()
    subdomains = ['www', 'mail', 'ftp', 'test', 'ns1', 'ns2']
    found_subdomains = []
    for subdomain in subdomains:
        try:
            host = f"{subdomain}.{domain}"
            dns.resolver.resolve(host)
            found_subdomains.append(host)
        except dns.resolver.NXDOMAIN:
            pass
    if found_subdomains:
        result = f"[!] Subdomains found: {found_subdomains}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
        logging.warning(result)
    else:
        result = "[+] No Subdomains found."
        results.append(result)
        print(Fore.GREEN + result + Style.RESET_ALL)
    print(f"Subdomain enumeration completed in {time.time() - start_time} seconds")

def analyze_headers(url):
    start_time = time.time()
    response = requests.head(url)
    headers = response.headers
    header_results = []
    if 'X-Frame-Options' not in headers:
        result = "[!] Missing X-Frame-Options header."
        header_results.append(result)
        logging.warning(result)
    else:
        result = "[+] X-Frame-Options header is present."
        header_results.append(result)
    
    if 'Content-Security-Policy' not in headers:
        result = "[!] Missing Content-Security-Policy header."
        header_results.append(result)
        logging.warning(result)
    else:
        result = "[+] Content-Security-Policy header is present."
        header_results.append(result)
    
    if 'Strict-Transport-Security' not in headers:
        result = "[!] Missing Strict-Transport-Security header."
        header_results.append(result)
        logging.warning(result)
    else:
        result = "[+] Strict-Transport-Security header is present."
        header_results.append(result)
    
    if 'X-Content-Type-Options' not in headers:
        result = "[!] Missing X-Content-Type-Options header."
        header_results.append(result)
        logging.warning(result)
    else:
        result = "[+] X-Content-Type-Options header is present."
        header_results.append(result)
    
    for res in header_results:
        if "[!]" in res:
            print(Fore.RED + res + Style.RESET_ALL)
        else:
            print(Fore.GREEN + res + Style.RESET_ALL)
        results.append(res)
    
    print(f"Header analysis completed in {time.time() - start_time} seconds")

def scan(url):
    print(f"Scanning {url} for vulnerabilities...")
    check_xss(url)
    check_sql_injection(url)
    check_lfi(url)
    check_csrf(url)
    check_directory_traversal(url)
    check_ssrf(url)
    check_xxe(url)
    check_open_redirect(url)
    analyze_headers(url)
    try:
        domain = url.split("//")[-1].split("/")[0]
        scan_ports(domain)
        enumerate_subdomains(domain)
    except Exception as e:
        result = f"Error scanning ports or subdomains: {e}"
        results.append(result)
        print(Fore.RED + result + Style.RESET_ALL)
    print("Scan completed.")
    print("\n--- Scan Results ---")
    for res in results:
        print(res)
    print("--------------------")

def main():
    parser = argparse.ArgumentParser(description="Comprehensive Vulnerability Scanner")
    parser.add_argument("url", help="URL of the target website")
    args = parser.parse_args()

    url = args.url
    logging.info(f"Starting scan for {url}")
    
    with ThreadPoolExecutor(max_workers=10) as executor:
        executor.submit(scan, url)

if __name__ == "__main__":
    main()
